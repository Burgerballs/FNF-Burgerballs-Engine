[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://be1bj0ge0c3gq"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/perlin2d.gd" id="1_hek0p"]
[ext_resource type="Script" path="res://addons/shaderV/tools/TimeScaled.gd" id="2_dfily"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2v76a"]
default_input_values = [1, Vector3(0, 0, 0), 2, 1.0, 3, Vector3(5, 9, 0)]
initialized = true
script = ExtResource("1_hek0p")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_n37n2"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_myt7g"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qlp2w"]
default_input_values = [0, 1.0]
initialized = true
script = ExtResource("2_dfily")

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise2D
float _perlin2dNoiseFunc(vec2 P, vec2 _period_perl2) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	if (_period_perl2.x != 0.0 && _period_perl2.y != 0.0)
		Pi = mod(Pi, vec4(_period_perl2, _period_perl2));
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


	float n_out5p0;
// ScaledTIME:5
	float n_in5p0 = 1.00000;
	{
		n_out5p0 = n_in5p0 * TIME;
	}


// VectorCompose:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 0.00000;
	vec3 n_out4p0 = vec3(n_out5p0, n_in4p1, n_in4p2);


	float n_out2p0;
// PerlinNoise2D:2
	float n_in2p2 = 1.00000;
	vec3 n_in2p3 = vec3(5.00000, 9.00000, 0.00000);
	{
		n_out2p0 = _perlin2dNoiseFunc((vec3(n_out3p0, 0.0).xy+n_out4p0.xy)*n_in2p2, n_in2p3.xy);
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(2060, -20)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_2v76a")
nodes/fragment/2/position = Vector2(1720, 140)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_n37n2")
nodes/fragment/3/position = Vector2(980, 140)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorCompose_myt7g")
nodes/fragment/4/position = Vector2(1460, 220)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_qlp2w")
nodes/fragment/5/position = Vector2(1080, 240)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 4, 0)
